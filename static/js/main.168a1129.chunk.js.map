{"version":3,"sources":["Reddit.js","Bikes.js","Clock.js","App.js","serviceWorker.js","index.js"],"names":["Reddit","useState","joke","setJoke","useEffect","fetch","then","response","json","data","children","catch","err","console","error","className","title","selftext","service","createEnturService","clientName","Bikes","bikeStations","setBikeStations","getBikeRentalStationsByPosition","latitude","longitude","map","stationData","key","id","station","BikeStation","props","name","bikesAvailable","spacesAvailable","Clock","dateTime","DateTime","local","setLocale","log","DATE_FULL","toLocaleString","TIME_24_SIMPLE","weekday","day","month","year","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wPA4BeA,EAxBA,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,KAcjB,OAJAC,qBAAU,WANNC,MANO,4DAOFC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUL,EAAQK,EAAKC,KAAKC,SAAS,GAAGD,SAC7CE,OAAM,SAACC,GAAD,OAASC,QAAQC,MAAMF,QAKnC,IAEIV,EAAQ,yBAAKa,UAAU,UAC1B,+CACA,2BAAIb,EAAKc,OACT,2BAAId,EAAKe,WAGb,sC,QCrBEC,E,MAAUC,GAAmB,CAAEC,WAAY,2BAoBlCC,EAlBD,WAAO,IAAD,EACwBpB,mBAAS,IADjC,mBACTqB,EADS,KACKC,EADL,KAUhB,OAPAnB,qBAAU,WACNc,EAAQM,gCACJ,CAAEC,SAAU,UAAWC,UAAW,WACjC,KACCpB,MAAK,SAACG,GAAD,OAAUc,EAAgBd,QACtC,IAEI,yBAAKM,UAAU,gBAClB,+CACCO,EAAaK,KAAI,SAAAC,GAAW,OACzB,kBAAC,EAAD,CAAaC,IAAKD,EAAYE,GAAIC,QAASH,SAOjDI,EAAc,SAACC,GAAY,IACrBF,EAAYE,EAAZF,QAER,OAAO,yBAAKhB,UAAU,eAClB,4BAAKgB,EAAQG,MACb,2BAAIH,EAAQI,eAAZ,kBACA,2BAAIJ,EAAQK,gBAAZ,+B,OCLOC,EAvBD,WACV,IAAMC,EAAWC,WAASC,QAAQC,UAAU,SAI5C,OAFA5B,QAAQ6B,IAAIH,WAASI,WAEd,yBAAK5B,UAAU,SAClB,wBAAIA,UAAU,QACTuB,EAASM,eAAeL,WAASM,iBAEtC,4BACKP,EAASM,eAAeL,WAASI,YAEtC,4BACKL,EAASM,eAAe,CACrBE,QAAS,OACTC,IAAK,UACLC,MAAO,OACPC,KAAM,eCDPC,MAbf,WACE,OACE,yBAAKnC,UAAU,OACb,0CACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,QCFcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdtD,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMoD,c","file":"static/js/main.168a1129.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst APIUrl = \"https://www.reddit.com/r/dadjokes/top.json?t=day&limit=1\";\n\nconst Reddit = () => {\n    const [joke, setJoke] = useState({});\n\n    const getJoke = () => {\n        fetch(APIUrl)\n            .then((response) => response.json())\n            .then((json) => setJoke(json.data.children[0].data))\n            .catch((err) => console.error(err));\n    };\n\n    useEffect(() => {\n        getJoke();\n    }, []);\n\n    return joke ? (<div className=\"reddit\">\n        <h2>Dagens dad joke</h2>\n        <p>{joke.title}</p>\n        <p>{joke.selftext}</p>\n    </div>\n    ) : (\n    <></>\n    );\n};\n\nexport default Reddit;\n","import React, { useState, useEffect } from \"react\";\nimport createEnturService from '@entur/sdk';\n\nconst service = createEnturService({ clientName: 'min_herlige_infoskjerm' })\n\nconst Bikes = () => {\n    const [bikeStations, setBikeStations] = useState([]);\n\n    useEffect(() => {\n        service.getBikeRentalStationsByPosition(\n            { latitude: 63.428311, longitude: 10.392514 },\n             230\n            ).then((data) => setBikeStations(data));\n    }, []);\n\n    return <div className=\"bikeStations\">\n        <h1>Bysykkelstativ:</h1>\n        {bikeStations.map(stationData => (\n            <BikeStation key={stationData.id} station={stationData} />\n        ))}\n        </div>\n};\n\nexport default Bikes;\n\nconst BikeStation = (props) =>  {\n    const { station } = props;\n\n    return <div className=\"bikeStation\">\n        <h3>{station.name}</h3>\n        <p>{station.bikesAvailable} ledige sykler</p>\n        <p>{station.spacesAvailable} ledige parkeringsplasser</p>\n    </div>;\n};\n","import React from \"react\";\nimport { DateTime } from \"luxon\";\n\nconst Clock = () => {\n    const dateTime = DateTime.local().setLocale(\"nb-NO\");\n\n    console.log(DateTime.DATE_FULL)\n\n    return <div className=\"clock\">\n        <h2 className=\"time\">\n            {dateTime.toLocaleString(DateTime.TIME_24_SIMPLE)}\n        </h2>\n        <h2>\n            {dateTime.toLocaleString(DateTime.DATE_FULL)}\n        </h2>\n        <h2>\n            {dateTime.toLocaleString({\n                weekday: \"long\",\n                day: \"numeric\",\n                month: \"long\",\n                year: \"numeric\"\n            })}\n        </h2>\n    </div>\n};\n\nexport default Clock;","import React from 'react';\nimport './App.css';\nimport Reddit from './Reddit';\nimport Bikes from './Bikes';\nimport Clock from './Clock';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Infoskjerm</h1>\n      <Clock/>\n      <hr/>\n      <Reddit/>\n      <hr/>\n      <Bikes/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}